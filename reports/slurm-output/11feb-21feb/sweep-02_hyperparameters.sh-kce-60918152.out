Activating virtual environment:  SNPNet
/faststorage/project/NLPPred/snp-compression/SNPNet/bin/python
Running wandb sweep
wandb: Starting wandb agent üïµÔ∏è
2022-02-20 18:19:11,802 - wandb.wandb_agent - INFO - Running runs: []
2022-02-20 18:19:12,135 - wandb.wandb_agent - INFO - Agent received command: run
2022-02-20 18:19:12,136 - wandb.wandb_agent - INFO - Agent starting run with config:
	auto_lr_find: True
	batch_size: 12
	layers_factor: 0.5
	limit_train: 20000
	max_epochs: 1
	optimizer: adam
	p_test: 2000
	p_val: 2000
	precision: 16
	val_check_interval: 4000
	width: 64
2022-02-20 18:19:12,144 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python src/train/train.py --auto_lr_find=True --batch_size=12 --layers_factor=0.5 --limit_train=20000 --max_epochs=1 --optimizer=adam --p_test=2000 --p_val=2000 --precision=16 --val_check_interval=4000 --width=64
2022-02-20 18:19:17,160 - wandb.wandb_agent - INFO - Running runs: ['h2plp2px']
wandb: Currently logged in as: kenevoldsen (use `wandb login --relogin` to force relogin)
wandb: WARNING Ignored wandb.init() arg project when running a sweep.
wandb: Tracking run with wandb version 0.12.10
wandb: Syncing run crisp-sweep-1
wandb: ‚≠êÔ∏è View project at https://wandb.ai/kenevoldsen/snp-compression
wandb: üßπ View sweep at https://wandb.ai/kenevoldsen/snp-compression/sweeps/cqqyn6wf
wandb: üöÄ View run at https://wandb.ai/kenevoldsen/snp-compression/runs/h2plp2px
wandb: Run data is saved locally in /home/kce/NLPPred/snp-compression/models/wandb/run-20220220_181918-h2plp2px
wandb: Run `wandb offline` to turn off syncing.
Using 16bit native Automatic Mixed Precision (AMP)
GPU available: True, used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Set SLURM handle signals.

Finding best initial lr:   0% 0/100 [00:00<?, ?it/s]Finding best initial lr:   1% 1/100 [00:00<00:23,  4.26it/s]Finding best initial lr:   2% 2/100 [00:00<00:19,  4.95it/s]Finding best initial lr:   3% 3/100 [00:00<00:17,  5.40it/s]Finding best initial lr:   4% 4/100 [00:00<00:16,  5.66it/s]Finding best initial lr:   5% 5/100 [00:00<00:16,  5.80it/s]Finding best initial lr:   6% 6/100 [00:01<00:15,  5.90it/s]Finding best initial lr:   7% 7/100 [00:01<00:15,  5.97it/s]Finding best initial lr:   8% 8/100 [00:01<00:15,  6.00it/s]Finding best initial lr:   9% 9/100 [00:01<00:15,  6.03it/s]Finding best initial lr:  10% 10/100 [00:01<00:14,  6.05it/s]Finding best initial lr:  11% 11/100 [00:01<00:14,  6.05it/s]Finding best initial lr:  12% 12/100 [00:02<00:14,  6.06it/s]Finding best initial lr:  13% 13/100 [00:02<00:14,  6.06it/s]Finding best initial lr:  14% 14/100 [00:02<00:14,  6.07it/s]Finding best initial lr:  15% 15/100 [00:02<00:13,  6.08it/s]Finding best initial lr:  16% 16/100 [00:02<00:13,  6.09it/s]Finding best initial lr:  17% 17/100 [00:02<00:13,  6.09it/s]Finding best initial lr:  18% 18/100 [00:03<00:13,  6.09it/s]Finding best initial lr:  19% 19/100 [00:03<00:13,  6.08it/s]Finding best initial lr:  20% 20/100 [00:03<00:13,  6.08it/s]Finding best initial lr:  21% 21/100 [00:03<00:12,  6.09it/s]Finding best initial lr:  22% 22/100 [00:03<00:12,  6.09it/s]Finding best initial lr:  23% 23/100 [00:03<00:12,  6.09it/s]Finding best initial lr:  24% 24/100 [00:04<00:12,  6.05it/s]Finding best initial lr:  25% 25/100 [00:04<00:12,  6.05it/s]Finding best initial lr:  26% 26/100 [00:04<00:12,  6.06it/s]Finding best initial lr:  27% 27/100 [00:04<00:12,  6.07it/s]Finding best initial lr:  28% 28/100 [00:04<00:11,  6.08it/s]Finding best initial lr:  29% 29/100 [00:04<00:11,  6.08it/s]Finding best initial lr:  30% 30/100 [00:05<00:11,  6.09it/s]Finding best initial lr:  31% 31/100 [00:05<00:11,  6.09it/s]Finding best initial lr:  32% 32/100 [00:05<00:11,  6.08it/s]Finding best initial lr:  33% 33/100 [00:05<00:11,  6.08it/s]Finding best initial lr:  34% 34/100 [00:05<00:10,  6.09it/s]Finding best initial lr:  35% 35/100 [00:05<00:10,  6.09it/s]Finding best initial lr:  36% 36/100 [00:06<00:10,  6.09it/s]Finding best initial lr:  37% 37/100 [00:06<00:10,  6.09it/s]Finding best initial lr:  38% 38/100 [00:06<00:10,  6.09it/s]Finding best initial lr:  39% 39/100 [00:06<00:10,  6.09it/s]Finding best initial lr:  40% 40/100 [00:06<00:09,  6.10it/s]Finding best initial lr:  41% 41/100 [00:06<00:09,  6.10it/s]Finding best initial lr:  42% 42/100 [00:06<00:09,  6.10it/s]Finding best initial lr:  43% 43/100 [00:07<00:09,  6.08it/s]Finding best initial lr:  44% 44/100 [00:07<00:09,  6.08it/s]Finding best initial lr:  45% 45/100 [00:07<00:09,  6.09it/s]Finding best initial lr:  46% 46/100 [00:07<00:08,  6.09it/s]Finding best initial lr:  47% 47/100 [00:07<00:08,  6.10it/s]Finding best initial lr:  48% 48/100 [00:07<00:08,  6.10it/s]Finding best initial lr:  49% 49/100 [00:08<00:08,  5.99it/s]Finding best initial lr:  50% 50/100 [00:08<00:08,  5.99it/s]Finding best initial lr:  51% 51/100 [00:08<00:08,  6.02it/s]Finding best initial lr:  52% 52/100 [00:08<00:07,  6.04it/s]Finding best initial lr:  53% 53/100 [00:08<00:07,  6.04it/s]Finding best initial lr:  54% 54/100 [00:08<00:07,  6.05it/s]Finding best initial lr:  55% 55/100 [00:09<00:07,  6.04it/s]Finding best initial lr:  56% 56/100 [00:09<00:07,  6.05it/s]Finding best initial lr:  57% 57/100 [00:09<00:07,  6.06it/s]Finding best initial lr:  58% 58/100 [00:09<00:06,  6.07it/s]Finding best initial lr:  59% 59/100 [00:09<00:06,  6.08it/s]Finding best initial lr:  60% 60/100 [00:09<00:06,  6.08it/s]Finding best initial lr:  61% 61/100 [00:10<00:06,  6.09it/s]Finding best initial lr:  62% 62/100 [00:10<00:06,  6.09it/s]Finding best initial lr:  63% 63/100 [00:10<00:06,  6.09it/s]Finding best initial lr:  64% 64/100 [00:10<00:05,  6.09it/s]Finding best initial lr:  65% 65/100 [00:10<00:05,  6.10it/s]Finding best initial lr:  66% 66/100 [00:10<00:05,  6.10it/s]Finding best initial lr:  67% 67/100 [00:11<00:05,  6.08it/s]Finding best initial lr:  68% 68/100 [00:11<00:05,  6.09it/s]Finding best initial lr:  69% 69/100 [00:11<00:05,  6.09it/s]Finding best initial lr:  70% 70/100 [00:11<00:04,  6.10it/s]Finding best initial lr:  71% 71/100 [00:11<00:04,  6.08it/s]Finding best initial lr:  72% 72/100 [00:11<00:04,  6.08it/s]Finding best initial lr:  73% 73/100 [00:12<00:04,  6.08it/s]Finding best initial lr:  74% 74/100 [00:12<00:04,  6.08it/s]Finding best initial lr:  75% 75/100 [00:12<00:04,  6.09it/s]Finding best initial lr:  76% 76/100 [00:12<00:03,  6.08it/s]Finding best initial lr:  77% 77/100 [00:12<00:03,  6.07it/s]Finding best initial lr:  78% 78/100 [00:12<00:03,  6.08it/s]Finding best initial lr:  79% 79/100 [00:13<00:03,  6.07it/s]Finding best initial lr:  80% 80/100 [00:13<00:03,  6.08it/s]Finding best initial lr:  81% 81/100 [00:13<00:03,  6.08it/s]Finding best initial lr:  82% 82/100 [00:13<00:02,  6.08it/s]Finding best initial lr:  83% 83/100 [00:13<00:02,  6.09it/s]Finding best initial lr:  84% 84/100 [00:13<00:02,  6.09it/s]Finding best initial lr:  85% 85/100 [00:14<00:02,  6.09it/s]Finding best initial lr:  86% 86/100 [00:14<00:02,  6.09it/s]Finding best initial lr:  87% 87/100 [00:14<00:02,  6.09it/s]Finding best initial lr:  88% 88/100 [00:14<00:01,  6.09it/s]Finding best initial lr:  89% 89/100 [00:14<00:01,  6.09it/s]Finding best initial lr:  90% 90/100 [00:14<00:01,  6.09it/s]Finding best initial lr:  91% 91/100 [00:15<00:01,  6.08it/s]Finding best initial lr:  92% 92/100 [00:15<00:01,  6.09it/s]Finding best initial lr:  93% 93/100 [00:15<00:01,  6.09it/s]Finding best initial lr:  94% 94/100 [00:15<00:00,  6.10it/s]Finding best initial lr:  95% 95/100 [00:15<00:00,  6.10it/s]Finding best initial lr:  96% 96/100 [00:15<00:00,  6.10it/s]Finding best initial lr:  97% 97/100 [00:16<00:00,  6.10it/s]Finding best initial lr:  98% 98/100 [00:16<00:00,  6.10it/s]Finding best initial lr:  99% 99/100 [00:16<00:00,  6.10it/s]Finding best initial lr: 100% 100/100 [00:16<00:00,  6.10it/s]Restoring states from the checkpoint path at /home/kce/NLPPred/snp-compression/models/lr_find_temp_model_a5bf4566-e1cd-44dd-8f45-65d5423298b6.ckpt
Finding best initial lr: 100% 100/100 [00:16<00:00,  5.94it/s]
[34m[1mwandb[0m: [32m[41mERROR[0m plotly is required to log interactive plots, install with: pip install plotly or convert the plot to an image with `wandb.Image(plt)`
Traceback (most recent call last):
  File "src/train/train.py", line 111, in <module>
    main()
  File "src/train/train.py", line 103, in main
    wandb.log({"lr_finder.plot": fig})
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 1349, in log
    self.history._row_add(data)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/wandb_history.py", line 44, in _row_add
    self._flush()
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/wandb_history.py", line 59, in _flush
    self._callback(row=self._data, step=self._step)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/wandb_run.py", line 1027, in _history_callback
    self._backend.interface.publish_history(
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/interface/interface.py", line 496, in publish_history
    data = data_types.history_dict_to_json(run, data, step=step)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/data_types.py", line 2591, in history_dict_to_json
    payload[key] = val_to_json(run, key, val, namespace=step)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/data_types.py", line 2616, in val_to_json
    val = Plotly.make_plot_media(val)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/sdk/data_types.py", line 2540, in make_plot_media
    val = util.matplotlib_to_plotly(val)
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/util.py", line 506, in matplotlib_to_plotly
    tools = get_module(
  File "/faststorage/project/NLPPred/snp-compression/SNPNet/lib/python3.8/site-packages/wandb/util.py", line 189, in get_module
    raise wandb.Error(required)
wandb.errors.Error: plotly is required to log interactive plots, install with: pip install plotly or convert the plot to an image with `wandb.Image(plt)`
wandb: ERROR Problem finishing run
/home/kce/miniconda3/envs/snp-compression/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 6 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
2022-02-20 18:20:04,973 - wandb.wandb_agent - INFO - Cleaning up finished run: h2plp2px
2022-02-20 18:20:05,322 - wandb.wandb_agent - INFO - Agent received command: run
2022-02-20 18:20:05,324 - wandb.wandb_agent - INFO - Agent starting run with config:
	auto_lr_find: True
	batch_size: 12
	layers_factor: 0.5
	limit_train: 20000
	max_epochs: 1
	optimizer: adam
	p_test: 2000
	p_val: 2000
	precision: 32
	val_check_interval: 4000
	width: 64
2022-02-20 18:20:05,331 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python src/train/train.py --auto_lr_find=True --batch_size=12 --layers_factor=0.5 --limit_train=20000 --max_epochs=1 --optimizer=adam --p_test=2000 --p_val=2000 --precision=32 --val_check_interval=4000 --width=64
2022-02-20 18:20:10,348 - wandb.wandb_agent - INFO - Running runs: ['vfvirft6']
slurmstepd: error: *** JOB 60918152 ON s10n01 CANCELLED AT 2022-02-20T18:20:10 ***
